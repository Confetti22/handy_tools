#!/usr/bin/env python3

import argparse
import numpy as np
import h5py
import os
import tifffile as tif
from scipy.ndimage import zoom

def analyze_tiff(image_path,all_flag=False):
    # Open the TIFF image
    with tif.TiffFile(image_path) as f:
        image = f.asarray()
    
    # Calculate the required statistics
    shape = image.shape
    dtype = image.dtype
    print(f"Shape: {shape}")
    print(f"Dtype: {dtype}")

    if all_flag:
        min_val = np.min(image)
        max_val = np.max(image)
        percentiles = np.percentile(image, [5, 10, 50, 80, 99])
        print(f"Min: {min_val}")
        print(f"Max: {max_val}")
        print(f"Percentiles: 5th={percentiles[0]}, 10th={percentiles[1]}, 50th={percentiles[2]}, 80th={percentiles[3]}, 99th={percentiles[4]}")

def zoom_vol(path,target_shape):
    source_img=tif.imread(path)
    fname=os.path.basename(path)
    source_shape=source_img.shape
    zoom_factors=[t/s for t,s in zip(target_shape,source_shape)]
    target_img=zoom(source_img,zoom_factors,order=2)
    tif.imwrite(f'zoomed_{fname}',target_img)
    print(f"shape of zoomed img is {target_img.shape},has been saved")




class ImsVolume():

    def __init__(self,ims_path):
        self.hdf5=h5py.File(ims_path,'r')
        self.level_keys = list(self.hdf5['DataSet'].keys())
        self.channel_keys=[key for key in self.hdf5['DataSet'][self.level_keys[0]]['TimePoint 0']]
        self.data_shapes= [self.hdf5['DataSet'][level_key]['TimePoint 0'][self.channel_keys[0]]['Data'].shape for level_key in self.level_keys]

        

    def get_info(self):
        print(f"number of channels: {len(self.channel_keys)}")
        print("shape ordered in z,y,x")
        for idx,level_key in enumerate(self.level_keys):
            print(f"data shape at {level_key} is {self.data_shapes[idx]}")

    
    def write_sub_volume(self,level,channel,save_dir,fname=None):
        sub_vol=self.hdf5['DataSet'][self.level_keys[level]]['TimePoint 0'][self.channel_keys[channel]]['Data']
        if fname:
            save_path=f"{save_dir}/{fname}"
        else:
            save_path=f"{save_dir}/r{level}_c{channel}.tif"
        tif.imwrite(save_path,sub_vol)
        print(f"sub volume at level {level} and channel {channel} saved to {save_path}")

def detect_ims(img_path):
    _, ext = os.path.splitext(img_path)
    if ext.lower() == '.ims' or ext.lower()=='.h5':
        return True
    else:
        return False


def main():
    parser=argparse.ArgumentParser(description="get meta-data of a ims image or a tiff")
    parser.add_argument('img_path',type=str)
    parser.add_argument('--verbose',"--v",'-v',action="store_true",help="whether check more verbose info")
    parser.add_argument('-zoom',nargs=3,default=[0,0,0],type=int,help="target zoom shape")

    parser.add_argument('--w','-w',action='store_true',help="extract and write subvolume")
    parser.add_argument('-r','--r',type=int,default=3)
    parser.add_argument('-c','--c',type=int,default=0)
    parser.add_argument('-d','--d',default='.')
    parser.add_argument('-name')
    args=parser.parse_args()

    #determine the type of image
    if detect_ims(args.img_path):
        ims_vol=ImsVolume(args.img_path)
        ims_vol.get_info()
        if args.w:
            ims_vol.write_sub_volume(level=args.r,channel=args.c,save_dir=args.d,fname=args.name)
    else:
        analyze_tiff(args.img_path,args.verbose)
        if args.zoom[0]!=0:
            zoom_vol(args.img_path,args.zoom) 
    





if __name__ == "__main__":
    main()

 


